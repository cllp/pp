<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Configuration" #>
<#@ assembly name="Microsoft.SqlServer.Types" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ import namespace="System.CodeDom" #>
<#

//*** Settings *** //
var namespaceName = @"PP.Core.Model";
var connectionString = @"Server=.;Database=projektplaneraren20;Trusted_Connection=True; MultipleActiveResultSets=true;";


WriteLine("using System;");
WriteLine("using System.ComponentModel.DataAnnotations;");
WriteLine("");

WriteLine("namespace " + namespaceName);
WriteLine("{");

var orderedColumnsTemp = new SortedDictionary<int, string>();

using (var conn = new SqlConnection(connectionString))
{
    conn.Open();

    var tables = conn.GetSchema(SqlClientMetaDataCollectionNames.Tables, new string[] { null, null, null, "BASE TABLE" });
	var views = conn.GetSchema(SqlClientMetaDataCollectionNames.Tables, new string[] { null, null, null, "VIEW" });

    foreach (DataRow view in views.Rows)
        tables.Rows.Add(view.ItemArray);

    foreach (DataRow table in tables.Rows)
    {
		string tableName = table["table_name"].ToString();
		if(tableName != "sysdiagrams")
		{
			orderedColumnsTemp.Clear();

			PushIndent("    ");
			WriteLine("public partial class " + tableName);
			WriteLine("{");
		
			var columns = conn.GetSchema(SqlClientMetaDataCollectionNames.Columns, new string[] { table["table_catalog"].ToString(), table["table_schema"].ToString(), tableName });

			// Gets the identifier of the table
			SqlCommand cmd = new SqlCommand();
			SqlDataReader reader;

			cmd.CommandText = @"
select
              c.COLUMN_NAME 'ColumnName'
from       
              INFORMATION_SCHEMA.COLUMNS AS c join
              INFORMATION_SCHEMA.TABLES AS t
                      ON t.TABLE_NAME = c.TABLE_NAME
where
               COLUMNPROPERTY(OBJECT_ID(c.TABLE_NAME) ,c.COLUMN_NAME,'IsIdentity') = 1 and
               t.TABLE_TYPE = 'Base Table' and
               t.TABLE_NAME = '" + tableName + "'";

			cmd.CommandType = CommandType.Text;
			cmd.Connection = conn;

			reader = cmd.ExecuteReader();

			List<string> primaryKeys = new List<string>();

			while (reader.Read()) {
				primaryKeys.Add(reader["ColumnName"].ToString().ToLower());
			}

			reader.Close();

			PushIndent("    ");

			foreach (DataRow column in columns.Rows)
			{
				string columnName = column["column_name"].ToString();

				if (primaryKeys.Contains(columnName.ToLower())) {
					WriteLine("[Key]");
				}

				WriteLine(string.Format("public {0} {1} {{ get; set; }}", GetCSharpDataType(column), columnName));
			}

			PopIndent();

			WriteLine("}");
			PopIndent();
			WriteLine("");
		}
    }

}

WriteLine("}");
#>
<#+
public static string GetCSharpDataType(DataRow column)
{
    Type result = null;

    switch (column["data_type"].ToString().ToLower())
    {
        case "bigint":
            result = typeof(Int64); break;
        case "binary":
            result = typeof(byte[]); break;
        case "bit":
            result = typeof(bool); break;
        case "char":
            result = typeof(string); break;
        case "datetime":
        case "datetime2":
        case "date":
            result = typeof(DateTime); break;
        case "time":
            result = typeof(TimeSpan); break;
        case "decimal":
            result = typeof(decimal); break;
        case "float":
            result = typeof(double); break;
        case "geography":
            result = typeof(Microsoft.SqlServer.Types.SqlGeography); break;
        case "int":
            result = typeof(int); break;
        case "money":
            result = typeof(decimal); break;
        case "nchar":
            result = typeof(string); break;
        case "numeric":
            result = typeof(decimal); break;
        case "nvarchar":
            result = typeof(string); break;
        case "real":
            result = typeof(Single); break;
        case "smallint":
            result = typeof(Int16); break;
        case "text":
            result = typeof(string); break;
        case "tinyint":
            result = typeof(byte); break;
        case "varbinary":
            result = typeof(byte[]); break;
        case "xml":
            result = typeof(string); break;
        case "varchar":
            result = typeof(string); break;
        case "smalldatetime":
            result = typeof(DateTime); break;
        case "image":
            result = typeof(byte[]); break;
        case "uniqueidentifier":
            result = typeof(Guid); break;
        case "timestamp":
            result = typeof(byte[]); break;
        case "hierarchyid":
            result = typeof(Microsoft.SqlServer.Types.SqlHierarchyId); break;

        default:
            throw new NotImplementedException("SQL data type not implemented");
    }

    var typeName = new CSharpCodeProvider().GetTypeOutput(new CodeTypeReference(result));
    typeName += (result.IsClass == false && column["is_nullable"].ToString() == "YES" ? "?" : string.Empty);

    return typeName;
}
#>